// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:dartuv/src/bindings/libuv.dart')
library;

import 'dart:ffi' as ffi;
import 'netdb.dart' as netdb;

@ffi.Native<ffi.UnsignedInt Function()>()
external int uv_version();

@ffi.Native<ffi.Pointer<ffi.Char> Function()>()
external ffi.Pointer<ffi.Char> uv_version_string();

@ffi.Native<ffi.Void Function()>()
external void uv_library_shutdown();

@ffi.Native<
    ffi.Int Function(
        uv_malloc_func, uv_realloc_func, uv_calloc_func, uv_free_func)>()
external int uv_replace_allocator(
  uv_malloc_func malloc_func,
  uv_realloc_func realloc_func,
  uv_calloc_func calloc_func,
  uv_free_func free_func,
);

@ffi.Native<ffi.Pointer<uv_loop_t> Function()>()
external ffi.Pointer<uv_loop_t> uv_default_loop();

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_loop_init(
  ffi.Pointer<uv_loop_t> loop,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_loop_close(
  ffi.Pointer<uv_loop_t> loop,
);

/// NOTE:
/// This function is DEPRECATED, users should
/// allocate the loop manually and use uv_loop_init instead.
@ffi.Native<ffi.Pointer<uv_loop_t> Function()>()
external ffi.Pointer<uv_loop_t> uv_loop_new();

/// NOTE:
/// This function is DEPRECATED. Users should use
/// uv_loop_close and free the memory manually instead.
@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>)>()
external void uv_loop_delete(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Size Function()>()
external int uv_loop_size();

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_loop_alive(
  ffi.Pointer<uv_loop_t> loop,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Int32)>()
external int uv_loop_configure(
  ffi.Pointer<uv_loop_t> loop,
  int option,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_loop_fork(
  ffi.Pointer<uv_loop_t> loop,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Int32)>()
external int uv_run(
  ffi.Pointer<uv_loop_t> arg0,
  int mode,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>)>()
external void uv_stop(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_handle_t>)>()
external void uv_ref(
  ffi.Pointer<uv_handle_t> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_handle_t>)>()
external void uv_unref(
  ffi.Pointer<uv_handle_t> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_handle_t>)>()
external int uv_has_ref(
  ffi.Pointer<uv_handle_t> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>)>()
external void uv_update_time(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<uv_loop_t>)>()
external int uv_now(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_backend_fd(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>)>()
external int uv_backend_timeout(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Int)>()
external int uv_translate_sys_error(
  int sys_errno,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>()
external ffi.Pointer<ffi.Char> uv_strerror(
  int err,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>()
external ffi.Pointer<ffi.Char> uv_strerror_r(
  int err,
  ffi.Pointer<ffi.Char> buf,
  int buflen,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int)>()
external ffi.Pointer<ffi.Char> uv_err_name(
  int err,
);

@ffi.Native<
    ffi.Pointer<ffi.Char> Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size)>()
external ffi.Pointer<ffi.Char> uv_err_name_r(
  int err,
  ffi.Pointer<ffi.Char> buf,
  int buflen,
);

/// Platform-specific request types.
@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_shutdown_t>, ffi.Pointer<uv_stream_t>, uv_shutdown_cb)>()
external int uv_shutdown(
  ffi.Pointer<uv_shutdown_t> req,
  ffi.Pointer<uv_stream_t> handle,
  uv_shutdown_cb cb,
);

@ffi.Native<ffi.Size Function(ffi.Int32)>()
external int uv_handle_size(
  int type,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<uv_handle_t>)>()
external int uv_handle_get_type(
  ffi.Pointer<uv_handle_t> handle,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int32)>()
external ffi.Pointer<ffi.Char> uv_handle_type_name(
  int type,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<uv_handle_t>)>()
external ffi.Pointer<ffi.Void> uv_handle_get_data(
  ffi.Pointer<uv_handle_t> handle,
);

@ffi.Native<ffi.Pointer<uv_loop_t> Function(ffi.Pointer<uv_handle_t>)>()
external ffi.Pointer<uv_loop_t> uv_handle_get_loop(
  ffi.Pointer<uv_handle_t> handle,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<uv_handle_t>, ffi.Pointer<ffi.Void>)>()
external void uv_handle_set_data(
  ffi.Pointer<uv_handle_t> handle,
  ffi.Pointer<ffi.Void> data,
);

@ffi.Native<ffi.Size Function(ffi.Int32)>()
external int uv_req_size(
  int type,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<uv_req_t>)>()
external ffi.Pointer<ffi.Void> uv_req_get_data(
  ffi.Pointer<uv_req_t> req,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_req_t>, ffi.Pointer<ffi.Void>)>()
external void uv_req_set_data(
  ffi.Pointer<uv_req_t> req,
  ffi.Pointer<ffi.Void> data,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<uv_req_t>)>()
external int uv_req_get_type(
  ffi.Pointer<uv_req_t> req,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Int32)>()
external ffi.Pointer<ffi.Char> uv_req_type_name(
  int type,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_handle_t>)>()
external int uv_is_active(
  ffi.Pointer<uv_handle_t> handle,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<uv_loop_t>, uv_walk_cb, ffi.Pointer<ffi.Void>)>()
external void uv_walk(
  ffi.Pointer<uv_loop_t> loop,
  uv_walk_cb walk_cb,
  ffi.Pointer<ffi.Void> arg,
);

/// Helpers for ad hoc debugging, no API/ABI stability guaranteed.
@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<FILE>)>()
external void uv_print_all_handles(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<FILE> stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<FILE>)>()
external void uv_print_active_handles(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<FILE> stream,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_handle_t>, uv_close_cb)>()
external void uv_close(
  ffi.Pointer<uv_handle_t> handle,
  uv_close_cb close_cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_handle_t>, ffi.Pointer<ffi.Int>)>()
external int uv_send_buffer_size(
  ffi.Pointer<uv_handle_t> handle,
  ffi.Pointer<ffi.Int> value,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_handle_t>, ffi.Pointer<ffi.Int>)>()
external int uv_recv_buffer_size(
  ffi.Pointer<uv_handle_t> handle,
  ffi.Pointer<ffi.Int> value,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_handle_t>, ffi.Pointer<uv_os_fd_t>)>()
external int uv_fileno(
  ffi.Pointer<uv_handle_t> handle,
  ffi.Pointer<uv_os_fd_t> fd,
);

@ffi.Native<uv_buf_t Function(ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>()
external uv_buf_t uv_buf_init(
  ffi.Pointer<ffi.Char> base,
  int len,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_file>, ffi.Int, ffi.Int)>()
external int uv_pipe(
  ffi.Pointer<uv_file> fds,
  int read_flags,
  int write_flags,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Int, ffi.Int, ffi.Pointer<uv_os_sock_t>, ffi.Int, ffi.Int)>()
external int uv_socketpair(
  int type,
  int protocol,
  ffi.Pointer<uv_os_sock_t> socket_vector,
  int flags0,
  int flags1,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<uv_stream_t>)>()
external int uv_stream_get_write_queue_size(
  ffi.Pointer<uv_stream_t> stream,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_stream_t>, ffi.Int, uv_connection_cb)>()
external int uv_listen(
  ffi.Pointer<uv_stream_t> stream,
  int backlog,
  uv_connection_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_stream_t>, ffi.Pointer<uv_stream_t>)>()
external int uv_accept(
  ffi.Pointer<uv_stream_t> server,
  ffi.Pointer<uv_stream_t> client,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_stream_t>, uv_alloc_cb, uv_read_cb)>()
external int uv_read_start(
  ffi.Pointer<uv_stream_t> arg0,
  uv_alloc_cb alloc_cb,
  uv_read_cb read_cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_stream_t>)>()
external int uv_read_stop(
  ffi.Pointer<uv_stream_t> arg0,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_write_t>, ffi.Pointer<uv_stream_t>,
        ffi.Pointer<uv_buf_t>, ffi.UnsignedInt, uv_write_cb)>()
external int uv_write(
  ffi.Pointer<uv_write_t> req,
  ffi.Pointer<uv_stream_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  uv_write_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_write_t>,
        ffi.Pointer<uv_stream_t>,
        ffi.Pointer<uv_buf_t>,
        ffi.UnsignedInt,
        ffi.Pointer<uv_stream_t>,
        uv_write_cb)>()
external int uv_write2(
  ffi.Pointer<uv_write_t> req,
  ffi.Pointer<uv_stream_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  ffi.Pointer<uv_stream_t> send_handle,
  uv_write_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_stream_t>, ffi.Pointer<uv_buf_t>, ffi.UnsignedInt)>()
external int uv_try_write(
  ffi.Pointer<uv_stream_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_stream_t>, ffi.Pointer<uv_buf_t>,
        ffi.UnsignedInt, ffi.Pointer<uv_stream_t>)>()
external int uv_try_write2(
  ffi.Pointer<uv_stream_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  ffi.Pointer<uv_stream_t> send_handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_stream_t>)>()
external int uv_is_readable(
  ffi.Pointer<uv_stream_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_stream_t>)>()
external int uv_is_writable(
  ffi.Pointer<uv_stream_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_stream_t>, ffi.Int)>()
external int uv_stream_set_blocking(
  ffi.Pointer<uv_stream_t> handle,
  int blocking,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_handle_t>)>()
external int uv_is_closing(
  ffi.Pointer<uv_handle_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_tcp_t>)>()
external int uv_tcp_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_tcp_t> handle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_tcp_t>, ffi.UnsignedInt)>()
external int uv_tcp_init_ex(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_tcp_t> handle,
  int flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tcp_t>, uv_os_sock_t)>()
external int uv_tcp_open(
  ffi.Pointer<uv_tcp_t> handle,
  int sock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tcp_t>, ffi.Int)>()
external int uv_tcp_nodelay(
  ffi.Pointer<uv_tcp_t> handle,
  int enable,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tcp_t>, ffi.Int, ffi.UnsignedInt)>()
external int uv_tcp_keepalive(
  ffi.Pointer<uv_tcp_t> handle,
  int enable,
  int delay,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tcp_t>, ffi.Int)>()
external int uv_tcp_simultaneous_accepts(
  ffi.Pointer<uv_tcp_t> handle,
  int enable,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_tcp_t>, ffi.Pointer<sockaddr>, ffi.UnsignedInt)>()
external int uv_tcp_bind(
  ffi.Pointer<uv_tcp_t> handle,
  ffi.Pointer<sockaddr> addr,
  int flags,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_tcp_t>, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>()
external int uv_tcp_getsockname(
  ffi.Pointer<uv_tcp_t> handle,
  ffi.Pointer<sockaddr> name,
  ffi.Pointer<ffi.Int> namelen,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_tcp_t>, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>()
external int uv_tcp_getpeername(
  ffi.Pointer<uv_tcp_t> handle,
  ffi.Pointer<sockaddr> name,
  ffi.Pointer<ffi.Int> namelen,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tcp_t>, uv_close_cb)>()
external int uv_tcp_close_reset(
  ffi.Pointer<uv_tcp_t> handle,
  uv_close_cb close_cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_connect_t>, ffi.Pointer<uv_tcp_t>,
        ffi.Pointer<sockaddr>, uv_connect_cb)>()
external int uv_tcp_connect(
  ffi.Pointer<uv_connect_t> req,
  ffi.Pointer<uv_tcp_t> handle,
  ffi.Pointer<sockaddr> addr,
  uv_connect_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_udp_t>)>()
external int uv_udp_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_udp_t> handle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_udp_t>, ffi.UnsignedInt)>()
external int uv_udp_init_ex(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_udp_t> handle,
  int flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, uv_os_sock_t)>()
external int uv_udp_open(
  ffi.Pointer<uv_udp_t> handle,
  int sock,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_udp_t>, ffi.Pointer<sockaddr>, ffi.UnsignedInt)>()
external int uv_udp_bind(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<sockaddr> addr,
  int flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Pointer<sockaddr>)>()
external int uv_udp_connect(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<sockaddr> addr,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_udp_t>, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>()
external int uv_udp_getpeername(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<sockaddr> name,
  ffi.Pointer<ffi.Int> namelen,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_udp_t>, ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Int>)>()
external int uv_udp_getsockname(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<sockaddr> name,
  ffi.Pointer<ffi.Int> namelen,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Int32)>()
external int uv_udp_set_membership(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<ffi.Char> multicast_addr,
  ffi.Pointer<ffi.Char> interface_addr,
  int membership,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int32)>()
external int uv_udp_set_source_membership(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<ffi.Char> multicast_addr,
  ffi.Pointer<ffi.Char> interface_addr,
  ffi.Pointer<ffi.Char> source_addr,
  int membership,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Int)>()
external int uv_udp_set_multicast_loop(
  ffi.Pointer<uv_udp_t> handle,
  int on1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Int)>()
external int uv_udp_set_multicast_ttl(
  ffi.Pointer<uv_udp_t> handle,
  int ttl,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Pointer<ffi.Char>)>()
external int uv_udp_set_multicast_interface(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<ffi.Char> interface_addr,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Int)>()
external int uv_udp_set_broadcast(
  ffi.Pointer<uv_udp_t> handle,
  int on1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Int)>()
external int uv_udp_set_ttl(
  ffi.Pointer<uv_udp_t> handle,
  int ttl,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_udp_send_t>,
        ffi.Pointer<uv_udp_t>,
        ffi.Pointer<uv_buf_t>,
        ffi.UnsignedInt,
        ffi.Pointer<sockaddr>,
        uv_udp_send_cb)>()
external int uv_udp_send(
  ffi.Pointer<uv_udp_send_t> req,
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  ffi.Pointer<sockaddr> addr,
  uv_udp_send_cb send_cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_udp_t>, ffi.Pointer<uv_buf_t>,
        ffi.UnsignedInt, ffi.Pointer<sockaddr>)>()
external int uv_udp_try_send(
  ffi.Pointer<uv_udp_t> handle,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  ffi.Pointer<sockaddr> addr,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_udp_t>, uv_alloc_cb, uv_udp_recv_cb)>()
external int uv_udp_recv_start(
  ffi.Pointer<uv_udp_t> handle,
  uv_alloc_cb alloc_cb,
  uv_udp_recv_cb recv_cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>)>()
external int uv_udp_using_recvmmsg(
  ffi.Pointer<uv_udp_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_udp_t>)>()
external int uv_udp_recv_stop(
  ffi.Pointer<uv_udp_t> handle,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<uv_udp_t>)>()
external int uv_udp_get_send_queue_size(
  ffi.Pointer<uv_udp_t> handle,
);

@ffi.Native<ffi.Size Function(ffi.Pointer<uv_udp_t>)>()
external int uv_udp_get_send_queue_count(
  ffi.Pointer<uv_udp_t> handle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_tty_t>, uv_file, ffi.Int)>()
external int uv_tty_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_tty_t> arg1,
  int fd,
  int readable,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_tty_t>, ffi.Int32)>()
external int uv_tty_set_mode(
  ffi.Pointer<uv_tty_t> arg0,
  int mode,
);

@ffi.Native<ffi.Int Function()>()
external int uv_tty_reset_mode();

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_tty_t>, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>()
external int uv_tty_get_winsize(
  ffi.Pointer<uv_tty_t> arg0,
  ffi.Pointer<ffi.Int> width,
  ffi.Pointer<ffi.Int> height,
);

@ffi.Native<ffi.Void Function(ffi.Int32)>()
external void uv_tty_set_vterm_state(
  int state,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Int32>)>()
external int uv_tty_get_vterm_state(
  ffi.Pointer<ffi.Int32> state,
);

@ffi.Native<ffi.Int32 Function(uv_file)>()
external int uv_guess_handle(
  int file,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_pipe_t>, ffi.Int)>()
external int uv_pipe_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_pipe_t> handle,
  int ipc,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_pipe_t>, uv_file)>()
external int uv_pipe_open(
  ffi.Pointer<uv_pipe_t> arg0,
  int file,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_pipe_t>, ffi.Pointer<ffi.Char>)>()
external int uv_pipe_bind(
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_pipe_t>, ffi.Pointer<ffi.Char>, ffi.Size,
        ffi.UnsignedInt)>()
external int uv_pipe_bind2(
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> name,
  int namelen,
  int flags,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<uv_connect_t>, ffi.Pointer<uv_pipe_t>,
        ffi.Pointer<ffi.Char>, uv_connect_cb)>()
external void uv_pipe_connect(
  ffi.Pointer<uv_connect_t> req,
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> name,
  uv_connect_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_connect_t>, ffi.Pointer<uv_pipe_t>,
        ffi.Pointer<ffi.Char>, ffi.Size, ffi.UnsignedInt, uv_connect_cb)>()
external int uv_pipe_connect2(
  ffi.Pointer<uv_connect_t> req,
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> name,
  int namelen,
  int flags,
  uv_connect_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_pipe_t>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_pipe_getsockname(
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_pipe_t>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_pipe_getpeername(
  ffi.Pointer<uv_pipe_t> handle,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_pipe_t>, ffi.Int)>()
external void uv_pipe_pending_instances(
  ffi.Pointer<uv_pipe_t> handle,
  int count,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_pipe_t>)>()
external int uv_pipe_pending_count(
  ffi.Pointer<uv_pipe_t> handle,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<uv_pipe_t>)>()
external int uv_pipe_pending_type(
  ffi.Pointer<uv_pipe_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_pipe_t>, ffi.Int)>()
external int uv_pipe_chmod(
  ffi.Pointer<uv_pipe_t> handle,
  int flags,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_poll_t>, ffi.Int)>()
external int uv_poll_init(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_poll_t> handle,
  int fd,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_poll_t>, uv_os_sock_t)>()
external int uv_poll_init_socket(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_poll_t> handle,
  int socket,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_poll_t>, ffi.Int, uv_poll_cb)>()
external int uv_poll_start(
  ffi.Pointer<uv_poll_t> handle,
  int events,
  uv_poll_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_poll_t>)>()
external int uv_poll_stop(
  ffi.Pointer<uv_poll_t> handle,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_prepare_t>)>()
external int uv_prepare_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_prepare_t> prepare,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_prepare_t>, uv_prepare_cb)>()
external int uv_prepare_start(
  ffi.Pointer<uv_prepare_t> prepare,
  uv_prepare_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_prepare_t>)>()
external int uv_prepare_stop(
  ffi.Pointer<uv_prepare_t> prepare,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_check_t>)>()
external int uv_check_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_check_t> check,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_check_t>, uv_check_cb)>()
external int uv_check_start(
  ffi.Pointer<uv_check_t> check,
  uv_check_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_check_t>)>()
external int uv_check_stop(
  ffi.Pointer<uv_check_t> check,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_idle_t>)>()
external int uv_idle_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_idle_t> idle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_idle_t>, uv_idle_cb)>()
external int uv_idle_start(
  ffi.Pointer<uv_idle_t> idle,
  uv_idle_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_idle_t>)>()
external int uv_idle_stop(
  ffi.Pointer<uv_idle_t> idle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_async_t>, uv_async_cb)>()
external int uv_async_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_async_t> async1,
  uv_async_cb async_cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_async_t>)>()
external int uv_async_send(
  ffi.Pointer<uv_async_t> async1,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_timer_t>)>()
external int uv_timer_init(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<uv_timer_t> handle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_timer_t>, uv_timer_cb, ffi.Uint64, ffi.Uint64)>()
external int uv_timer_start(
  ffi.Pointer<uv_timer_t> handle,
  uv_timer_cb cb,
  int timeout,
  int repeat,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_timer_t>)>()
external int uv_timer_stop(
  ffi.Pointer<uv_timer_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_timer_t>)>()
external int uv_timer_again(
  ffi.Pointer<uv_timer_t> handle,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_timer_t>, ffi.Uint64)>()
external void uv_timer_set_repeat(
  ffi.Pointer<uv_timer_t> handle,
  int repeat,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<uv_timer_t>)>()
external int uv_timer_get_repeat(
  ffi.Pointer<uv_timer_t> handle,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<uv_timer_t>)>()
external int uv_timer_get_due_in(
  ffi.Pointer<uv_timer_t> handle,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>,
        ffi.Pointer<uv_getaddrinfo_t>,
        uv_getaddrinfo_cb,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>,
        ffi.Pointer<netdb.addrinfo>)>()
external int uv_getaddrinfo(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_getaddrinfo_t> req,
  uv_getaddrinfo_cb getaddrinfo_cb,
  ffi.Pointer<ffi.Char> node,
  ffi.Pointer<ffi.Char> service,
  ffi.Pointer<netdb.addrinfo> hints,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<netdb.addrinfo>)>()
external void uv_freeaddrinfo(
  ffi.Pointer<netdb.addrinfo> ai,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_getnameinfo_t>,
        uv_getnameinfo_cb, ffi.Pointer<sockaddr>, ffi.Int)>()
external int uv_getnameinfo(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_getnameinfo_t> req,
  uv_getnameinfo_cb getnameinfo_cb,
  ffi.Pointer<sockaddr> addr,
  int flags,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_process_t>,
        ffi.Pointer<uv_process_options_t>)>()
external int uv_spawn(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_process_t> handle,
  ffi.Pointer<uv_process_options_t> options,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_process_t>, ffi.Int)>()
external int uv_process_kill(
  ffi.Pointer<uv_process_t> arg0,
  int signum,
);

@ffi.Native<ffi.Int Function(ffi.Int, ffi.Int)>()
external int uv_kill(
  int pid,
  int signum,
);

@ffi.Native<uv_pid_t Function(ffi.Pointer<uv_process_t>)>()
external int uv_process_get_pid(
  ffi.Pointer<uv_process_t> arg0,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_work_t>, uv_work_cb,
        uv_after_work_cb)>()
external int uv_queue_work(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_work_t> req,
  uv_work_cb work_cb,
  uv_after_work_cb after_work_cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_req_t>)>()
external int uv_cancel(
  ffi.Pointer<uv_req_t> req,
);

@ffi.Native<
    ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
        ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>()
external ffi.Pointer<ffi.Pointer<ffi.Char>> uv_setup_args(
  int argc,
  ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_get_process_title(
  ffi.Pointer<ffi.Char> buffer,
  int size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int uv_set_process_title(
  ffi.Pointer<ffi.Char> title,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Size>)>()
external int uv_resident_set_memory(
  ffi.Pointer<ffi.Size> rss,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Double>)>()
external int uv_uptime(
  ffi.Pointer<ffi.Double> uptime,
);

@ffi.Native<uv_os_fd_t Function(ffi.Int)>()
external int uv_get_osfhandle(
  int fd,
);

@ffi.Native<ffi.Int Function(uv_os_fd_t)>()
external int uv_open_osfhandle(
  int os_fd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_rusage_t>)>()
external int uv_getrusage(
  ffi.Pointer<uv_rusage_t> rusage,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_os_homedir(
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_os_tmpdir(
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_passwd_t>)>()
external int uv_os_get_passwd(
  ffi.Pointer<uv_passwd_t> pwd,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_passwd_t>)>()
external void uv_os_free_passwd(
  ffi.Pointer<uv_passwd_t> pwd,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_passwd_t>, uv_uid_t)>()
external int uv_os_get_passwd2(
  ffi.Pointer<uv_passwd_t> pwd,
  int uid,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_group_t>, uv_uid_t)>()
external int uv_os_get_group(
  ffi.Pointer<uv_group_t> grp,
  int gid,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_group_t>)>()
external void uv_os_free_group(
  ffi.Pointer<uv_group_t> grp,
);

@ffi.Native<uv_pid_t Function()>()
external int uv_os_getpid();

@ffi.Native<uv_pid_t Function()>()
external int uv_os_getppid();

@ffi.Native<ffi.Int Function(uv_pid_t, ffi.Pointer<ffi.Int>)>()
external int uv_os_getpriority(
  int pid,
  ffi.Pointer<ffi.Int> priority,
);

@ffi.Native<ffi.Int Function(uv_pid_t, ffi.Int)>()
external int uv_os_setpriority(
  int pid,
  int priority,
);

@ffi.Native<ffi.Int Function(uv_thread_t, ffi.Pointer<ffi.Int>)>()
external int uv_thread_getpriority(
  int tid,
  ffi.Pointer<ffi.Int> priority,
);

@ffi.Native<ffi.Int Function(uv_thread_t, ffi.Int)>()
external int uv_thread_setpriority(
  int tid,
  int priority,
);

@ffi.Native<ffi.UnsignedInt Function()>()
external int uv_available_parallelism();

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Pointer<uv_cpu_info_t>>, ffi.Pointer<ffi.Int>)>()
external int uv_cpu_info(
  ffi.Pointer<ffi.Pointer<uv_cpu_info_t>> cpu_infos,
  ffi.Pointer<ffi.Int> count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_cpu_info_t>, ffi.Int)>()
external void uv_free_cpu_info(
  ffi.Pointer<uv_cpu_info_t> cpu_infos,
  int count,
);

@ffi.Native<ffi.Int Function()>()
external int uv_cpumask_size();

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Pointer<uv_interface_address_t>>,
        ffi.Pointer<ffi.Int>)>()
external int uv_interface_addresses(
  ffi.Pointer<ffi.Pointer<uv_interface_address_t>> addresses,
  ffi.Pointer<ffi.Int> count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_interface_address_t>, ffi.Int)>()
external void uv_free_interface_addresses(
  ffi.Pointer<uv_interface_address_t> addresses,
  int count,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Pointer<uv_env_item_t>>, ffi.Pointer<ffi.Int>)>()
external int uv_os_environ(
  ffi.Pointer<ffi.Pointer<uv_env_item_t>> envitems,
  ffi.Pointer<ffi.Int> count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_env_item_t>, ffi.Int)>()
external void uv_os_free_environ(
  ffi.Pointer<uv_env_item_t> envitems,
  int count,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_os_getenv(
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>()
external int uv_os_setenv(
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Char> value,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int uv_os_unsetenv(
  ffi.Pointer<ffi.Char> name,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_os_gethostname(
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_utsname_t>)>()
external int uv_os_uname(
  ffi.Pointer<uv_utsname_t> buffer,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_metrics_t>)>()
external int uv_metrics_info(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_metrics_t> metrics,
);

@ffi.Native<ffi.Uint64 Function(ffi.Pointer<uv_loop_t>)>()
external int uv_metrics_idle_time(
  ffi.Pointer<uv_loop_t> loop,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<uv_fs_t>)>()
external int uv_fs_get_type(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ssize_t Function(ffi.Pointer<uv_fs_t>)>()
external int uv_fs_get_result(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_fs_t>)>()
external int uv_fs_get_system_error(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<uv_fs_t>)>()
external ffi.Pointer<ffi.Void> uv_fs_get_ptr(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<uv_fs_t>)>()
external ffi.Pointer<ffi.Char> uv_fs_get_path(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ffi.Pointer<uv_stat_t> Function(ffi.Pointer<uv_fs_t>)>()
external ffi.Pointer<uv_stat_t> uv_fs_get_statbuf(
  ffi.Pointer<uv_fs_t> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_fs_t>)>()
external void uv_fs_req_cleanup(
  ffi.Pointer<uv_fs_t> req,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file, uv_fs_cb)>()
external int uv_fs_close(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Int, uv_fs_cb)>()
external int uv_fs_open(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int flags,
  int mode,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        ffi.Pointer<uv_buf_t>, ffi.UnsignedInt, ffi.Int64, uv_fs_cb)>()
external int uv_fs_read(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  int offset,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_unlink(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        ffi.Pointer<uv_buf_t>, ffi.UnsignedInt, ffi.Int64, uv_fs_cb)>()
external int uv_fs_write(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  ffi.Pointer<uv_buf_t> bufs,
  int nbufs,
  int offset,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_copyfile(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<ffi.Char> new_path,
  int flags,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_mkdir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int mode,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_mkdtemp(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> tpl,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_mkstemp(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> tpl,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_rmdir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_scandir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int flags,
  uv_fs_cb cb,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_fs_t>, ffi.Pointer<uv_dirent_t>)>()
external int uv_fs_scandir_next(
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<uv_dirent_t> ent,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_opendir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<uv_dir_t>, uv_fs_cb)>()
external int uv_fs_readdir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<uv_dir_t> dir,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<uv_dir_t>, uv_fs_cb)>()
external int uv_fs_closedir(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<uv_dir_t> dir,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_stat(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file, uv_fs_cb)>()
external int uv_fs_fstat(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_rename(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<ffi.Char> new_path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file, uv_fs_cb)>()
external int uv_fs_fsync(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file, uv_fs_cb)>()
external int uv_fs_fdatasync(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        ffi.Int64, uv_fs_cb)>()
external int uv_fs_ftruncate(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  int offset,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        uv_file, ffi.Int64, ffi.Size, uv_fs_cb)>()
external int uv_fs_sendfile(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int out_fd,
  int in_fd,
  int in_offset,
  int length,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_access(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int mode,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_chmod(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int mode,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Double, ffi.Double, uv_fs_cb)>()
external int uv_fs_utime(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  double atime,
  double mtime,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        ffi.Double, ffi.Double, uv_fs_cb)>()
external int uv_fs_futime(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  double atime,
  double mtime,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Double, ffi.Double, uv_fs_cb)>()
external int uv_fs_lutime(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  double atime,
  double mtime,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_lstat(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_link(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<ffi.Char> new_path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int, uv_fs_cb)>()
external int uv_fs_symlink(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  ffi.Pointer<ffi.Char> new_path,
  int flags,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_readlink(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_realpath(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        ffi.Int, uv_fs_cb)>()
external int uv_fs_fchmod(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  int mode,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_uid_t, uv_gid_t, uv_fs_cb)>()
external int uv_fs_chown(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int uid,
  int gid,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>, uv_file,
        uv_uid_t, uv_gid_t, uv_fs_cb)>()
external int uv_fs_fchown(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  int file,
  int uid,
  int gid,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_uid_t, uv_gid_t, uv_fs_cb)>()
external int uv_fs_lchown(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  int uid,
  int gid,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_t>,
        ffi.Pointer<ffi.Char>, uv_fs_cb)>()
external int uv_fs_statfs(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_t> req,
  ffi.Pointer<ffi.Char> path,
  uv_fs_cb cb,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_poll_t>)>()
external int uv_fs_poll_init(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_poll_t> handle,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_fs_poll_t>, uv_fs_poll_cb,
        ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>()
external int uv_fs_poll_start(
  ffi.Pointer<uv_fs_poll_t> handle,
  uv_fs_poll_cb poll_cb,
  ffi.Pointer<ffi.Char> path,
  int interval,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_fs_poll_t>)>()
external int uv_fs_poll_stop(
  ffi.Pointer<uv_fs_poll_t> handle,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_fs_poll_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Size>)>()
external int uv_fs_poll_getpath(
  ffi.Pointer<uv_fs_poll_t> handle,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_signal_t>)>()
external int uv_signal_init(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_signal_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_signal_t>, uv_signal_cb, ffi.Int)>()
external int uv_signal_start(
  ffi.Pointer<uv_signal_t> handle,
  uv_signal_cb signal_cb,
  int signum,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_signal_t>, uv_signal_cb, ffi.Int)>()
external int uv_signal_start_oneshot(
  ffi.Pointer<uv_signal_t> handle,
  uv_signal_cb signal_cb,
  int signum,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_signal_t>)>()
external int uv_signal_stop(
  ffi.Pointer<uv_signal_t> handle,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Double>)>()
external void uv_loadavg(
  ffi.Pointer<ffi.Double> avg,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_fs_event_t>)>()
external int uv_fs_event_init(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_fs_event_t> handle,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_fs_event_t>, uv_fs_event_cb,
        ffi.Pointer<ffi.Char>, ffi.UnsignedInt)>()
external int uv_fs_event_start(
  ffi.Pointer<uv_fs_event_t> handle,
  uv_fs_event_cb cb,
  ffi.Pointer<ffi.Char> path,
  int flags,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_fs_event_t>)>()
external int uv_fs_event_stop(
  ffi.Pointer<uv_fs_event_t> handle,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_fs_event_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Size>)>()
external int uv_fs_event_getpath(
  ffi.Pointer<uv_fs_event_t> handle,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<sockaddr_in>)>()
external int uv_ip4_addr(
  ffi.Pointer<ffi.Char> ip,
  int port,
  ffi.Pointer<sockaddr_in> addr,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<sockaddr_in6>)>()
external int uv_ip6_addr(
  ffi.Pointer<ffi.Char> ip,
  int port,
  ffi.Pointer<sockaddr_in6> addr,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<sockaddr_in>, ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_ip4_name(
  ffi.Pointer<sockaddr_in> src,
  ffi.Pointer<ffi.Char> dst,
  int size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<sockaddr_in6>, ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_ip6_name(
  ffi.Pointer<sockaddr_in6> src,
  ffi.Pointer<ffi.Char> dst,
  int size,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<sockaddr>, ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_ip_name(
  ffi.Pointer<sockaddr> src,
  ffi.Pointer<ffi.Char> dst,
  int size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_inet_ntop(
  int af,
  ffi.Pointer<ffi.Void> src,
  ffi.Pointer<ffi.Char> dst,
  int size,
);

@ffi.Native<
    ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>()
external int uv_inet_pton(
  int af,
  ffi.Pointer<ffi.Char> src,
  ffi.Pointer<ffi.Void> dst,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<uv_random_t>,
        ffi.Pointer<ffi.Void>, ffi.Size, ffi.UnsignedInt, uv_random_cb)>()
external int uv_random(
  ffi.Pointer<uv_loop_t> loop,
  ffi.Pointer<uv_random_t> req,
  ffi.Pointer<ffi.Void> buf,
  int buflen,
  int flags,
  uv_random_cb cb,
);

@ffi.Native<
    ffi.Int Function(
        ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_if_indextoname(
  int ifindex,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.UnsignedInt, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_if_indextoiid(
  int ifindex,
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_exepath(
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>()
external int uv_cwd(
  ffi.Pointer<ffi.Char> buffer,
  ffi.Pointer<ffi.Size> size,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>)>()
external int uv_chdir(
  ffi.Pointer<ffi.Char> dir,
);

@ffi.Native<ffi.Uint64 Function()>()
external int uv_get_free_memory();

@ffi.Native<ffi.Uint64 Function()>()
external int uv_get_total_memory();

@ffi.Native<ffi.Uint64 Function()>()
external int uv_get_constrained_memory();

@ffi.Native<ffi.Uint64 Function()>()
external int uv_get_available_memory();

@ffi.Native<ffi.Int Function(ffi.Int32, ffi.Pointer<uv_timespec64_t>)>()
external int uv_clock_gettime(
  int clock_id,
  ffi.Pointer<uv_timespec64_t> ts,
);

@ffi.Native<ffi.Uint64 Function()>()
external int uv_hrtime();

@ffi.Native<ffi.Void Function(ffi.UnsignedInt)>()
external void uv_sleep(
  int msec,
);

@ffi.Native<ffi.Void Function()>()
external void uv_disable_stdio_inheritance();

@ffi.Native<ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<uv_lib_t>)>()
external int uv_dlopen(
  ffi.Pointer<ffi.Char> filename,
  ffi.Pointer<uv_lib_t> lib,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_lib_t>)>()
external void uv_dlclose(
  ffi.Pointer<uv_lib_t> lib,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_lib_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>()
external int uv_dlsym(
  ffi.Pointer<uv_lib_t> lib,
  ffi.Pointer<ffi.Char> name,
  ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
);

@ffi.Native<ffi.Pointer<ffi.Char> Function(ffi.Pointer<uv_lib_t>)>()
external ffi.Pointer<ffi.Char> uv_dlerror(
  ffi.Pointer<uv_lib_t> lib,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_mutex_t>)>()
external int uv_mutex_init(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_mutex_t>)>()
external int uv_mutex_init_recursive(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_mutex_t>)>()
external void uv_mutex_destroy(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_mutex_t>)>()
external void uv_mutex_lock(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_mutex_t>)>()
external int uv_mutex_trylock(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_mutex_t>)>()
external void uv_mutex_unlock(
  ffi.Pointer<uv_mutex_t> handle,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_rwlock_t>)>()
external int uv_rwlock_init(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_rwlock_t>)>()
external void uv_rwlock_destroy(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_rwlock_t>)>()
external void uv_rwlock_rdlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_rwlock_t>)>()
external int uv_rwlock_tryrdlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_rwlock_t>)>()
external void uv_rwlock_rdunlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_rwlock_t>)>()
external void uv_rwlock_wrlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_rwlock_t>)>()
external int uv_rwlock_trywrlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_rwlock_t>)>()
external void uv_rwlock_wrunlock(
  ffi.Pointer<uv_rwlock_t> rwlock,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_sem_t>, ffi.UnsignedInt)>()
external int uv_sem_init(
  ffi.Pointer<uv_sem_t> sem,
  int value,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_sem_t>)>()
external void uv_sem_destroy(
  ffi.Pointer<uv_sem_t> sem,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_sem_t>)>()
external void uv_sem_post(
  ffi.Pointer<uv_sem_t> sem,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_sem_t>)>()
external void uv_sem_wait(
  ffi.Pointer<uv_sem_t> sem,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_sem_t>)>()
external int uv_sem_trywait(
  ffi.Pointer<uv_sem_t> sem,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_cond_t>)>()
external int uv_cond_init(
  ffi.Pointer<uv_cond_t> cond,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_cond_t>)>()
external void uv_cond_destroy(
  ffi.Pointer<uv_cond_t> cond,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_cond_t>)>()
external void uv_cond_signal(
  ffi.Pointer<uv_cond_t> cond,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_cond_t>)>()
external void uv_cond_broadcast(
  ffi.Pointer<uv_cond_t> cond,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_barrier_t>, ffi.UnsignedInt)>()
external int uv_barrier_init(
  ffi.Pointer<uv_barrier_t> barrier,
  int count,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_barrier_t>)>()
external void uv_barrier_destroy(
  ffi.Pointer<uv_barrier_t> barrier,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_barrier_t>)>()
external int uv_barrier_wait(
  ffi.Pointer<uv_barrier_t> barrier,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<uv_cond_t>, ffi.Pointer<uv_mutex_t>)>()
external void uv_cond_wait(
  ffi.Pointer<uv_cond_t> cond,
  ffi.Pointer<uv_mutex_t> mutex,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_cond_t>, ffi.Pointer<uv_mutex_t>, ffi.Uint64)>()
external int uv_cond_timedwait(
  ffi.Pointer<uv_cond_t> cond,
  ffi.Pointer<uv_mutex_t> mutex,
  int timeout,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<uv_once_t>,
        ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>()
external void uv_once(
  ffi.Pointer<uv_once_t> guard,
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> callback,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_key_t>)>()
external int uv_key_create(
  ffi.Pointer<uv_key_t> key,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_key_t>)>()
external void uv_key_delete(
  ffi.Pointer<uv_key_t> key,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<uv_key_t>)>()
external ffi.Pointer<ffi.Void> uv_key_get(
  ffi.Pointer<uv_key_t> key,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_key_t>, ffi.Pointer<ffi.Void>)>()
external void uv_key_set(
  ffi.Pointer<uv_key_t> key,
  ffi.Pointer<ffi.Void> value,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_timeval64_t>)>()
external int uv_gettimeofday(
  ffi.Pointer<uv_timeval64_t> tv,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_thread_t>, uv_thread_cb, ffi.Pointer<ffi.Void>)>()
external int uv_thread_create(
  ffi.Pointer<uv_thread_t> tid,
  uv_thread_cb entry,
  ffi.Pointer<ffi.Void> arg,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_thread_t>, ffi.Pointer<uv_thread_options_t>,
        uv_thread_cb, ffi.Pointer<ffi.Void>)>()
external int uv_thread_create_ex(
  ffi.Pointer<uv_thread_t> tid,
  ffi.Pointer<uv_thread_options_t> params,
  uv_thread_cb entry,
  ffi.Pointer<ffi.Void> arg,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_thread_t>, ffi.Pointer<ffi.Char>,
        ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_thread_setaffinity(
  ffi.Pointer<uv_thread_t> tid,
  ffi.Pointer<ffi.Char> cpumask,
  ffi.Pointer<ffi.Char> oldmask,
  int mask_size,
);

@ffi.Native<
    ffi.Int Function(
        ffi.Pointer<uv_thread_t>, ffi.Pointer<ffi.Char>, ffi.Size)>()
external int uv_thread_getaffinity(
  ffi.Pointer<uv_thread_t> tid,
  ffi.Pointer<ffi.Char> cpumask,
  int mask_size,
);

@ffi.Native<ffi.Int Function()>()
external int uv_thread_getcpu();

@ffi.Native<uv_thread_t Function()>()
external int uv_thread_self();

@ffi.Native<ffi.Int Function(ffi.Pointer<uv_thread_t>)>()
external int uv_thread_join(
  ffi.Pointer<uv_thread_t> tid,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<uv_thread_t>, ffi.Pointer<uv_thread_t>)>()
external int uv_thread_equal(
  ffi.Pointer<uv_thread_t> t1,
  ffi.Pointer<uv_thread_t> t2,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<uv_loop_t>)>()
external ffi.Pointer<ffi.Void> uv_loop_get_data(
  ffi.Pointer<uv_loop_t> arg0,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<uv_loop_t>, ffi.Pointer<ffi.Void>)>()
external void uv_loop_set_data(
  ffi.Pointer<uv_loop_t> arg0,
  ffi.Pointer<ffi.Void> data,
);

/// String utilities needed internally for dealing with Windows.
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Uint16>, ssize_t)>()
external int uv_utf16_length_as_wtf8(
  ffi.Pointer<ffi.Uint16> utf16,
  int utf16_len,
);

@ffi.Native<
    ffi.Int Function(ffi.Pointer<ffi.Uint16>, ssize_t,
        ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>()
external int uv_utf16_to_wtf8(
  ffi.Pointer<ffi.Uint16> utf16,
  int utf16_len,
  ffi.Pointer<ffi.Pointer<ffi.Char>> wtf8_ptr,
  ffi.Pointer<ffi.Size> wtf8_len_ptr,
);

@ffi.Native<ssize_t Function(ffi.Pointer<ffi.Char>)>()
external int uv_wtf8_length_as_utf16(
  ffi.Pointer<ffi.Char> wtf8,
);

@ffi.Native<
    ffi.Void Function(
        ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint16>, ffi.Size)>()
external void uv_wtf8_to_utf16(
  ffi.Pointer<ffi.Char> wtf8,
  ffi.Pointer<ffi.Uint16> utf16,
  int utf16_len,
);

/// Internal type, do not use.
final class uv__queue extends ffi.Struct {
  external ffi.Pointer<uv__queue> next;

  external ffi.Pointer<uv__queue> prev;
}

abstract class uv_errno_t {
  static const int UV_E2BIG = -7;
  static const int UV_EACCES = -13;
  static const int UV_EADDRINUSE = -98;
  static const int UV_EADDRNOTAVAIL = -99;
  static const int UV_EAFNOSUPPORT = -97;
  static const int UV_EAGAIN = -11;
  static const int UV_EAI_ADDRFAMILY = -3000;
  static const int UV_EAI_AGAIN = -3001;
  static const int UV_EAI_BADFLAGS = -3002;
  static const int UV_EAI_BADHINTS = -3013;
  static const int UV_EAI_CANCELED = -3003;
  static const int UV_EAI_FAIL = -3004;
  static const int UV_EAI_FAMILY = -3005;
  static const int UV_EAI_MEMORY = -3006;
  static const int UV_EAI_NODATA = -3007;
  static const int UV_EAI_NONAME = -3008;
  static const int UV_EAI_OVERFLOW = -3009;
  static const int UV_EAI_PROTOCOL = -3014;
  static const int UV_EAI_SERVICE = -3010;
  static const int UV_EAI_SOCKTYPE = -3011;
  static const int UV_EALREADY = -114;
  static const int UV_EBADF = -9;
  static const int UV_EBUSY = -16;
  static const int UV_ECANCELED = -125;
  static const int UV_ECHARSET = -4080;
  static const int UV_ECONNABORTED = -103;
  static const int UV_ECONNREFUSED = -111;
  static const int UV_ECONNRESET = -104;
  static const int UV_EDESTADDRREQ = -89;
  static const int UV_EEXIST = -17;
  static const int UV_EFAULT = -14;
  static const int UV_EFBIG = -27;
  static const int UV_EHOSTUNREACH = -113;
  static const int UV_EINTR = -4;
  static const int UV_EINVAL = -22;
  static const int UV_EIO = -5;
  static const int UV_EISCONN = -106;
  static const int UV_EISDIR = -21;
  static const int UV_ELOOP = -40;
  static const int UV_EMFILE = -24;
  static const int UV_EMSGSIZE = -90;
  static const int UV_ENAMETOOLONG = -36;
  static const int UV_ENETDOWN = -100;
  static const int UV_ENETUNREACH = -101;
  static const int UV_ENFILE = -23;
  static const int UV_ENOBUFS = -105;
  static const int UV_ENODEV = -19;
  static const int UV_ENOENT = -2;
  static const int UV_ENOMEM = -12;
  static const int UV_ENONET = -64;
  static const int UV_ENOPROTOOPT = -92;
  static const int UV_ENOSPC = -28;
  static const int UV_ENOSYS = -38;
  static const int UV_ENOTCONN = -107;
  static const int UV_ENOTDIR = -20;
  static const int UV_ENOTEMPTY = -39;
  static const int UV_ENOTSOCK = -88;
  static const int UV_ENOTSUP = -95;
  static const int UV_EOVERFLOW = -75;
  static const int UV_EPERM = -1;
  static const int UV_EPIPE = -32;
  static const int UV_EPROTO = -71;
  static const int UV_EPROTONOSUPPORT = -93;
  static const int UV_EPROTOTYPE = -91;
  static const int UV_ERANGE = -34;
  static const int UV_EROFS = -30;
  static const int UV_ESHUTDOWN = -108;
  static const int UV_ESPIPE = -29;
  static const int UV_ESRCH = -3;
  static const int UV_ETIMEDOUT = -110;
  static const int UV_ETXTBSY = -26;
  static const int UV_EXDEV = -18;
  static const int UV_UNKNOWN = -4094;
  static const int UV_EOF = -4095;
  static const int UV_ENXIO = -6;
  static const int UV_EMLINK = -31;
  static const int UV_EHOSTDOWN = -112;
  static const int UV_EREMOTEIO = -121;
  static const int UV_ENOTTY = -25;
  static const int UV_EFTYPE = -4028;
  static const int UV_EILSEQ = -84;
  static const int UV_ESOCKTNOSUPPORT = -94;
  static const int UV_ENODATA = -61;
  static const int UV_EUNATCH = -49;
  static const int UV_ERRNO_MAX = -4096;
}

abstract class uv_handle_type {
  static const int UV_UNKNOWN_HANDLE = 0;
  static const int UV_ASYNC = 1;
  static const int UV_CHECK = 2;
  static const int UV_FS_EVENT = 3;
  static const int UV_FS_POLL = 4;
  static const int UV_HANDLE = 5;
  static const int UV_IDLE = 6;
  static const int UV_NAMED_PIPE = 7;
  static const int UV_POLL = 8;
  static const int UV_PREPARE = 9;
  static const int UV_PROCESS = 10;
  static const int UV_STREAM = 11;
  static const int UV_TCP = 12;
  static const int UV_TIMER = 13;
  static const int UV_TTY = 14;
  static const int UV_UDP = 15;
  static const int UV_SIGNAL = 16;
  static const int UV_FILE = 17;
  static const int UV_HANDLE_TYPE_MAX = 18;
}

abstract class uv_req_type {
  static const int UV_UNKNOWN_REQ = 0;
  static const int UV_REQ = 1;
  static const int UV_CONNECT = 2;
  static const int UV_WRITE = 3;
  static const int UV_SHUTDOWN = 4;
  static const int UV_UDP_SEND = 5;
  static const int UV_FS = 6;
  static const int UV_WORK = 7;
  static const int UV_GETADDRINFO = 8;
  static const int UV_GETNAMEINFO = 9;
  static const int UV_RANDOM = 10;
  static const int UV_REQ_TYPE_MAX = 11;
}

/// The abstract base class of all handles.
final class uv_handle_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion4 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;
}

/// Handle types.
typedef uv_loop_t = uv_loop_s;

final class uv_loop_s extends ffi.Struct {
  /// User data - use this for whatever.
  external ffi.Pointer<ffi.Void> data;

  /// Loop reference counting.
  @ffi.UnsignedInt()
  external int active_handles;

  external uv__queue handle_queue;

  external UnnamedUnion1 active_reqs;

  /// Internal storage for future extensions.
  external ffi.Pointer<ffi.Void> internal_fields;

  /// Internal flag to signal loop stop.
  @ffi.UnsignedInt()
  external int stop_flag;

  @ffi.UnsignedLong()
  external int flags;

  @ffi.Int()
  external int backend_fd;

  external uv__queue pending_queue;

  external uv__queue watcher_queue;

  external ffi.Pointer<ffi.Pointer<uv__io_t>> watchers;

  @ffi.UnsignedInt()
  external int nwatchers;

  @ffi.UnsignedInt()
  external int nfds;

  external uv__queue wq;

  external uv_mutex_t wq_mutex;

  external uv_async_t wq_async;

  external uv_rwlock_t cloexec_lock;

  external ffi.Pointer<uv_handle_t> closing_handles;

  external uv__queue process_handles;

  external uv__queue prepare_handles;

  external uv__queue check_handles;

  external uv__queue idle_handles;

  external uv__queue async_handles;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> async_unused;

  external uv__io_t async_io_watcher;

  @ffi.Int()
  external int async_wfd;

  external UnnamedStruct1 timer_heap;

  @ffi.Uint64()
  external int timer_counter;

  @ffi.Uint64()
  external int time;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> signal_pipefd;

  external uv__io_t signal_io_watcher;

  external uv_signal_t child_watcher;

  @ffi.Int()
  external int emfile_fd;

  external uv__io_t inotify_read_watcher;

  external ffi.Pointer<ffi.Void> inotify_watchers;

  @ffi.Int()
  external int inotify_fd;
}

final class UnnamedUnion1 extends ffi.Union {
  external ffi.Pointer<ffi.Void> unused;

  @ffi.UnsignedInt()
  external int count;
}

typedef uv__io_t = uv__io_s;

final class uv__io_s extends ffi.Struct {
  external uv__io_cb cb;

  external uv__queue pending_queue;

  external uv__queue watcher_queue;

  /// Pending event mask i.e. mask at next tick.
  @ffi.UnsignedInt()
  external int pevents;

  /// Current event mask.
  @ffi.UnsignedInt()
  external int events;

  @ffi.Int()
  external int fd;
}

typedef uv__io_cb = ffi.Pointer<ffi.NativeFunction<uv__io_cbFunction>>;
typedef uv__io_cbFunction = ffi.Void Function(ffi.Pointer<uv_loop_s> loop,
    ffi.Pointer<uv__io_s> w, ffi.UnsignedInt events);
typedef Dartuv__io_cbFunction = void Function(
    ffi.Pointer<uv_loop_s> loop, ffi.Pointer<uv__io_s> w, int events);
typedef uv_mutex_t = pthread_mutex_t;

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

typedef uv_async_t = uv_async_s;

final class uv_async_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t1> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion2 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_async_cb async_cb;

  external uv__queue queue;

  @ffi.Int()
  external int pending;
}

/// Handle types.
typedef uv_loop_t1 = uv_loop_s;
typedef uv_close_cb = ffi.Pointer<ffi.NativeFunction<uv_close_cbFunction>>;
typedef uv_close_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_handle_t> handle);
typedef Dartuv_close_cbFunction = void Function(
    ffi.Pointer<uv_handle_t> handle);
typedef uv_handle_t = uv_handle_s;

final class UnnamedUnion2 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_async_cb = ffi.Pointer<ffi.NativeFunction<uv_async_cbFunction>>;
typedef uv_async_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_async_t1> handle);
typedef Dartuv_async_cbFunction = void Function(
    ffi.Pointer<uv_async_t1> handle);
typedef uv_async_t1 = uv_async_s;
typedef uv_rwlock_t = pthread_rwlock_t;

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class UnnamedStruct1 extends ffi.Struct {
  external ffi.Pointer<ffi.Void> min;

  @ffi.UnsignedInt()
  external int nelts;
}

typedef uv_signal_t = uv_signal_s;

final class uv_signal_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t1> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion3 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_signal_cb signal_cb;

  @ffi.Int()
  external int signum;

  external UnnamedStruct2 tree_entry;

  @ffi.UnsignedInt()
  external int caught_signals;

  @ffi.UnsignedInt()
  external int dispatched_signals;
}

final class UnnamedUnion3 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_signal_cb = ffi.Pointer<ffi.NativeFunction<uv_signal_cbFunction>>;
typedef uv_signal_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_signal_t1> handle, ffi.Int signum);
typedef Dartuv_signal_cbFunction = void Function(
    ffi.Pointer<uv_signal_t1> handle, int signum);
typedef uv_signal_t1 = uv_signal_s;

final class UnnamedStruct2 extends ffi.Struct {
  external ffi.Pointer<uv_signal_s> rbe_left;

  external ffi.Pointer<uv_signal_s> rbe_right;

  external ffi.Pointer<uv_signal_s> rbe_parent;

  @ffi.Int()
  external int rbe_color;
}

final class UnnamedUnion4 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

final class uv_dir_s extends ffi.Struct {
  external ffi.Pointer<uv_dirent_t> dirents;

  @ffi.Size()
  external int nentries;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external ffi.Pointer<DIR> dir;
}

typedef uv_dirent_t = uv_dirent_s;

final class uv_dirent_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int type;
}

abstract class uv_dirent_type_t {
  static const int UV_DIRENT_UNKNOWN = 0;
  static const int UV_DIRENT_FILE = 1;
  static const int UV_DIRENT_DIR = 2;
  static const int UV_DIRENT_LINK = 3;
  static const int UV_DIRENT_FIFO = 4;
  static const int UV_DIRENT_SOCKET = 5;
  static const int UV_DIRENT_CHAR = 6;
  static const int UV_DIRENT_BLOCK = 7;
}

typedef DIR = __dirstream;

final class __dirstream extends ffi.Opaque {}

/// uv_stream_t is a subclass of uv_handle_t.
///
/// uv_stream is an abstract class.
///
/// uv_stream_t is the parent class of uv_tcp_t, uv_pipe_t and uv_tty_t.
final class uv_stream_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion5 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Size()
  external int write_queue_size;

  external uv_alloc_cb alloc_cb;

  external uv_read_cb read_cb;

  external ffi.Pointer<uv_connect_t> connect_req;

  external ffi.Pointer<uv_shutdown_t> shutdown_req;

  external uv__io_t io_watcher;

  external uv__queue write_queue;

  external uv__queue write_completed_queue;

  external uv_connection_cb connection_cb;

  @ffi.Int()
  external int delayed_error;

  @ffi.Int()
  external int accepted_fd;

  external ffi.Pointer<ffi.Void> queued_fds;
}

final class UnnamedUnion5 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_alloc_cb = ffi.Pointer<ffi.NativeFunction<uv_alloc_cbFunction>>;
typedef uv_alloc_cbFunction = ffi.Void Function(ffi.Pointer<uv_handle_t> handle,
    ffi.Size suggested_size, ffi.Pointer<uv_buf_t> buf);
typedef Dartuv_alloc_cbFunction = void Function(ffi.Pointer<uv_handle_t> handle,
    int suggested_size, ffi.Pointer<uv_buf_t> buf);

/// Note: May be cast to struct iovec. See writev(2).
final class uv_buf_t extends ffi.Struct {
  external ffi.Pointer<ffi.Char> base;

  @ffi.Size()
  external int len;
}

typedef uv_read_cb = ffi.Pointer<ffi.NativeFunction<uv_read_cbFunction>>;
typedef uv_read_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_stream_t> stream, ssize_t nread, ffi.Pointer<uv_buf_t> buf);
typedef Dartuv_read_cbFunction = void Function(ffi.Pointer<uv_stream_t> stream,
    Dart__ssize_t nread, ffi.Pointer<uv_buf_t> buf);
typedef uv_stream_t = uv_stream_s;
typedef ssize_t = __ssize_t;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef uv_connect_t = uv_connect_s;

/// uv_connect_t is a subclass of uv_req_t.
final class uv_connect_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external uv_connect_cb cb;

  external ffi.Pointer<uv_stream_t> handle;

  external uv__queue queue;
}

typedef uv_connect_cb = ffi.Pointer<ffi.NativeFunction<uv_connect_cbFunction>>;
typedef uv_connect_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_connect_t1> req, ffi.Int status);
typedef Dartuv_connect_cbFunction = void Function(
    ffi.Pointer<uv_connect_t1> req, int status);
typedef uv_connect_t1 = uv_connect_s;
typedef uv_shutdown_t = uv_shutdown_s;

final class uv_shutdown_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external ffi.Pointer<uv_stream_t> handle;

  external uv_shutdown_cb cb;
}

typedef uv_shutdown_cb
    = ffi.Pointer<ffi.NativeFunction<uv_shutdown_cbFunction>>;
typedef uv_shutdown_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_shutdown_t1> req, ffi.Int status);
typedef Dartuv_shutdown_cbFunction = void Function(
    ffi.Pointer<uv_shutdown_t1> req, int status);
typedef uv_shutdown_t1 = uv_shutdown_s;
typedef uv_connection_cb
    = ffi.Pointer<ffi.NativeFunction<uv_connection_cbFunction>>;
typedef uv_connection_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_stream_t> server, ffi.Int status);
typedef Dartuv_connection_cbFunction = void Function(
    ffi.Pointer<uv_stream_t> server, int status);

/// uv_tcp_t is a subclass of uv_stream_t.
///
/// Represents a TCP stream or TCP server.
final class uv_tcp_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion6 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Size()
  external int write_queue_size;

  external uv_alloc_cb alloc_cb;

  external uv_read_cb read_cb;

  external ffi.Pointer<uv_connect_t> connect_req;

  external ffi.Pointer<uv_shutdown_t> shutdown_req;

  external uv__io_t io_watcher;

  external uv__queue write_queue;

  external uv__queue write_completed_queue;

  external uv_connection_cb connection_cb;

  @ffi.Int()
  external int delayed_error;

  @ffi.Int()
  external int accepted_fd;

  external ffi.Pointer<ffi.Void> queued_fds;
}

final class UnnamedUnion6 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

/// uv_udp_t is a subclass of uv_handle_t.
final class uv_udp_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion7 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  /// read-only */
  /// /*
  /// Number of bytes queued for sending. This field strictly shows how much
  /// information is currently queued.
  @ffi.Size()
  external int send_queue_size;

  /// Number of send requests currently in the queue awaiting to be processed.
  @ffi.Size()
  external int send_queue_count;

  external uv_alloc_cb alloc_cb;

  external uv_udp_recv_cb recv_cb;

  external uv__io_t io_watcher;

  external uv__queue write_queue;

  external uv__queue write_completed_queue;
}

final class UnnamedUnion7 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_udp_recv_cb
    = ffi.Pointer<ffi.NativeFunction<uv_udp_recv_cbFunction>>;
typedef uv_udp_recv_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_udp_t> handle,
    ssize_t nread,
    ffi.Pointer<uv_buf_t> buf,
    ffi.Pointer<sockaddr> addr,
    ffi.UnsignedInt flags);
typedef Dartuv_udp_recv_cbFunction = void Function(
    ffi.Pointer<uv_udp_t> handle,
    Dart__ssize_t nread,
    ffi.Pointer<uv_buf_t> buf,
    ffi.Pointer<sockaddr> addr,
    int flags);
typedef uv_udp_t = uv_udp_s;

final class sockaddr extends ffi.Struct {
  @sa_family_t()
  external int sa_family;

  @ffi.Array.multi([14])
  external ffi.Array<ffi.Char> sa_data;
}

typedef sa_family_t = ffi.UnsignedShort;
typedef Dartsa_family_t = int;

/// uv_pipe_t is a subclass of uv_stream_t.
///
/// Representing a pipe stream or pipe server. On Windows this is a Named
/// Pipe. On Unix this is a Unix domain socket.
final class uv_pipe_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion8 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Size()
  external int write_queue_size;

  external uv_alloc_cb alloc_cb;

  external uv_read_cb read_cb;

  external ffi.Pointer<uv_connect_t> connect_req;

  external ffi.Pointer<uv_shutdown_t> shutdown_req;

  external uv__io_t io_watcher;

  external uv__queue write_queue;

  external uv__queue write_completed_queue;

  external uv_connection_cb connection_cb;

  @ffi.Int()
  external int delayed_error;

  @ffi.Int()
  external int accepted_fd;

  external ffi.Pointer<ffi.Void> queued_fds;

  /// non-zero if this pipe is used for passing handles
  @ffi.Int()
  external int ipc;

  external ffi.Pointer<ffi.Char> pipe_fname;
}

final class UnnamedUnion8 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

/// uv_tty_t is a subclass of uv_stream_t.
///
/// Representing a stream for the console.
final class uv_tty_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion9 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  @ffi.Size()
  external int write_queue_size;

  external uv_alloc_cb alloc_cb;

  external uv_read_cb read_cb;

  external ffi.Pointer<uv_connect_t> connect_req;

  external ffi.Pointer<uv_shutdown_t> shutdown_req;

  external uv__io_t io_watcher;

  external uv__queue write_queue;

  external uv__queue write_completed_queue;

  external uv_connection_cb connection_cb;

  @ffi.Int()
  external int delayed_error;

  @ffi.Int()
  external int accepted_fd;

  external ffi.Pointer<ffi.Void> queued_fds;

  external termios orig_termios;

  @ffi.Int()
  external int mode;
}

final class UnnamedUnion9 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

final class termios extends ffi.Struct {
  @tcflag_t()
  external int c_iflag;

  @tcflag_t()
  external int c_oflag;

  @tcflag_t()
  external int c_cflag;

  @tcflag_t()
  external int c_lflag;

  @cc_t()
  external int c_line;

  @ffi.Array.multi([32])
  external ffi.Array<cc_t> c_cc;

  @speed_t()
  external int c_ispeed;

  @speed_t()
  external int c_ospeed;
}

typedef tcflag_t = ffi.UnsignedInt;
typedef Darttcflag_t = int;
typedef cc_t = ffi.UnsignedChar;
typedef Dartcc_t = int;
typedef speed_t = ffi.UnsignedInt;
typedef Dartspeed_t = int;

final class uv_poll_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion10 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_poll_cb poll_cb;

  external uv__io_t io_watcher;
}

final class UnnamedUnion10 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_poll_cb = ffi.Pointer<ffi.NativeFunction<uv_poll_cbFunction>>;
typedef uv_poll_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_poll_t> handle, ffi.Int status, ffi.Int events);
typedef Dartuv_poll_cbFunction = void Function(
    ffi.Pointer<uv_poll_t> handle, int status, int events);
typedef uv_poll_t = uv_poll_s;

/// uv_timer_t is a subclass of uv_handle_t.
///
/// Used to get woken up at a specified time in the future.
final class uv_timer_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion11 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_timer_cb timer_cb;

  external UnnamedUnion12 node;

  @ffi.Uint64()
  external int timeout;

  @ffi.Uint64()
  external int repeat;

  @ffi.Uint64()
  external int start_id;
}

final class UnnamedUnion11 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_timer_cb = ffi.Pointer<ffi.NativeFunction<uv_timer_cbFunction>>;
typedef uv_timer_cbFunction = ffi.Void Function(ffi.Pointer<uv_timer_t> handle);
typedef Dartuv_timer_cbFunction = void Function(ffi.Pointer<uv_timer_t> handle);
typedef uv_timer_t = uv_timer_s;

final class UnnamedUnion12 extends ffi.Union {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Pointer<ffi.Void>> heap;

  external uv__queue queue;
}

final class uv_prepare_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion13 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_prepare_cb prepare_cb;

  external uv__queue queue;
}

final class UnnamedUnion13 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_prepare_cb = ffi.Pointer<ffi.NativeFunction<uv_prepare_cbFunction>>;
typedef uv_prepare_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_prepare_t> handle);
typedef Dartuv_prepare_cbFunction = void Function(
    ffi.Pointer<uv_prepare_t> handle);
typedef uv_prepare_t = uv_prepare_s;

final class uv_check_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion14 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_check_cb check_cb;

  external uv__queue queue;
}

final class UnnamedUnion14 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_check_cb = ffi.Pointer<ffi.NativeFunction<uv_check_cbFunction>>;
typedef uv_check_cbFunction = ffi.Void Function(ffi.Pointer<uv_check_t> handle);
typedef Dartuv_check_cbFunction = void Function(ffi.Pointer<uv_check_t> handle);
typedef uv_check_t = uv_check_s;

final class uv_idle_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion15 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_idle_cb idle_cb;

  external uv__queue queue;
}

final class UnnamedUnion15 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_idle_cb = ffi.Pointer<ffi.NativeFunction<uv_idle_cbFunction>>;
typedef uv_idle_cbFunction = ffi.Void Function(ffi.Pointer<uv_idle_t> handle);
typedef Dartuv_idle_cbFunction = void Function(ffi.Pointer<uv_idle_t> handle);
typedef uv_idle_t = uv_idle_s;

/// uv_process_t is a subclass of uv_handle_t.
final class uv_process_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion16 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  external uv_exit_cb exit_cb;

  @ffi.Int()
  external int pid;

  external uv__queue queue;

  @ffi.Int()
  external int status;
}

final class UnnamedUnion16 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_exit_cb = ffi.Pointer<ffi.NativeFunction<uv_exit_cbFunction>>;
typedef uv_exit_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_process_t>, ffi.Int64, ffi.Int);
typedef Dartuv_exit_cbFunction = void Function(
    ffi.Pointer<uv_process_t>, int, int);
typedef uv_process_t = uv_process_s;

final class uv_fs_event_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion17 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  /// private
  external ffi.Pointer<ffi.Char> path;

  external uv_fs_event_cb cb;

  external uv__queue watchers;

  @ffi.Int()
  external int wd;
}

final class UnnamedUnion17 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

typedef uv_fs_event_cb
    = ffi.Pointer<ffi.NativeFunction<uv_fs_event_cbFunction>>;
typedef uv_fs_event_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_fs_event_t> handle,
    ffi.Pointer<ffi.Char> filename,
    ffi.Int events,
    ffi.Int status);
typedef Dartuv_fs_event_cbFunction = void Function(
    ffi.Pointer<uv_fs_event_t> handle,
    ffi.Pointer<ffi.Char> filename,
    int events,
    int status);
typedef uv_fs_event_t = uv_fs_event_s;

/// uv_fs_stat() based polling file watcher.
final class uv_fs_poll_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<uv_loop_t> loop;

  @ffi.Int32()
  external int type;

  external uv_close_cb close_cb;

  external uv__queue handle_queue;

  external UnnamedUnion18 u;

  external ffi.Pointer<uv_handle_t> next_closing;

  @ffi.UnsignedInt()
  external int flags;

  /// Private, don't touch.
  external ffi.Pointer<ffi.Void> poll_ctx;
}

final class UnnamedUnion18 extends ffi.Union {
  @ffi.Int()
  external int fd;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

/// Abstract base class of all requests.
final class uv_req_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;
}

/// uv_getaddrinfo_t is a subclass of uv_req_t.
///
/// Request object for uv_getaddrinfo.
final class uv_getaddrinfo_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  /// read-only
  external ffi.Pointer<uv_loop_t> loop;

  external uv__work work_req;

  external uv_getaddrinfo_cb cb;

  external ffi.Pointer<netdb.addrinfo> hints;

  external ffi.Pointer<ffi.Char> hostname;

  external ffi.Pointer<ffi.Char> service;

  external ffi.Pointer<netdb.addrinfo> addrinfo;

  @ffi.Int()
  external int retcode;
}

final class uv__work extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<uv__work> w)>>
      work;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<uv__work> w, ffi.Int status)>> done;

  external ffi.Pointer<uv_loop_s> loop;

  external uv__queue wq;
}

typedef uv_getaddrinfo_cb
    = ffi.Pointer<ffi.NativeFunction<uv_getaddrinfo_cbFunction>>;
typedef uv_getaddrinfo_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_getaddrinfo_t> req,
    ffi.Int status,
    ffi.Pointer<netdb.addrinfo> res);
typedef Dartuv_getaddrinfo_cbFunction = void Function(
    ffi.Pointer<uv_getaddrinfo_t> req,
    int status,
    ffi.Pointer<netdb.addrinfo> res);
typedef uv_getaddrinfo_t = uv_getaddrinfo_s;

/// uv_getnameinfo_t is a subclass of uv_req_t.
///
/// Request object for uv_getnameinfo.
final class uv_getnameinfo_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  /// read-only
  external ffi.Pointer<uv_loop_t> loop;

  external uv__work work_req;

  external uv_getnameinfo_cb getnameinfo_cb;

  external sockaddr_storage storage;

  @ffi.Int()
  external int flags;

  @ffi.Array.multi([1025])
  external ffi.Array<ffi.Char> host;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> service;

  @ffi.Int()
  external int retcode;
}

typedef uv_getnameinfo_cb
    = ffi.Pointer<ffi.NativeFunction<uv_getnameinfo_cbFunction>>;
typedef uv_getnameinfo_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_getnameinfo_t> req,
    ffi.Int status,
    ffi.Pointer<ffi.Char> hostname,
    ffi.Pointer<ffi.Char> service);
typedef Dartuv_getnameinfo_cbFunction = void Function(
    ffi.Pointer<uv_getnameinfo_t> req,
    int status,
    ffi.Pointer<ffi.Char> hostname,
    ffi.Pointer<ffi.Char> service);
typedef uv_getnameinfo_t = uv_getnameinfo_s;

final class sockaddr_storage extends ffi.Struct {
  @sa_family_t()
  external int ss_family;

  @ffi.Array.multi([118])
  external ffi.Array<ffi.Char> __ss_padding;

  @ffi.UnsignedLong()
  external int __ss_align;
}

/// uv_write_t is a subclass of uv_req_t.
final class uv_write_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external uv_write_cb cb;

  /// TODO: make private and unix-only in v2.x.
  external ffi.Pointer<uv_stream_t> send_handle;

  external ffi.Pointer<uv_stream_t> handle;

  external uv__queue queue;

  @ffi.UnsignedInt()
  external int write_index;

  external ffi.Pointer<uv_buf_t> bufs;

  @ffi.UnsignedInt()
  external int nbufs;

  @ffi.Int()
  external int error;

  @ffi.Array.multi([4])
  external ffi.Array<uv_buf_t> bufsml;
}

typedef uv_write_cb = ffi.Pointer<ffi.NativeFunction<uv_write_cbFunction>>;
typedef uv_write_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_write_t> req, ffi.Int status);
typedef Dartuv_write_cbFunction = void Function(
    ffi.Pointer<uv_write_t> req, int status);
typedef uv_write_t = uv_write_s;

/// uv_udp_send_t is a subclass of uv_req_t.
final class uv_udp_send_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external ffi.Pointer<uv_udp_t> handle;

  external uv_udp_send_cb cb;

  external uv__queue queue;

  external sockaddr_storage addr;

  @ffi.UnsignedInt()
  external int nbufs;

  external ffi.Pointer<uv_buf_t> bufs;

  @ssize_t()
  external int status;

  external uv_udp_send_cb send_cb;

  @ffi.Array.multi([4])
  external ffi.Array<uv_buf_t> bufsml;
}

typedef uv_udp_send_cb
    = ffi.Pointer<ffi.NativeFunction<uv_udp_send_cbFunction>>;
typedef uv_udp_send_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_udp_send_t> req, ffi.Int status);
typedef Dartuv_udp_send_cbFunction = void Function(
    ffi.Pointer<uv_udp_send_t> req, int status);
typedef uv_udp_send_t = uv_udp_send_s;

/// uv_fs_t is a subclass of uv_req_t.
final class uv_fs_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  @ffi.Int32()
  external int fs_type;

  external ffi.Pointer<uv_loop_t> loop;

  external uv_fs_cb cb;

  @ssize_t()
  external int result;

  external ffi.Pointer<ffi.Void> ptr;

  external ffi.Pointer<ffi.Char> path;

  /// Stores the result of uv_fs_stat() and uv_fs_fstat().
  external uv_stat_t statbuf;

  external ffi.Pointer<ffi.Char> new_path;

  @uv_file()
  external int file;

  @ffi.Int()
  external int flags;

  @mode_t()
  external int mode;

  @ffi.UnsignedInt()
  external int nbufs;

  external ffi.Pointer<uv_buf_t> bufs;

  @off_t()
  external int off;

  @uv_uid_t()
  external int uid;

  @uv_gid_t()
  external int gid;

  @ffi.Double()
  external double atime;

  @ffi.Double()
  external double mtime;

  external uv__work work_req;

  @ffi.Array.multi([4])
  external ffi.Array<uv_buf_t> bufsml;
}

abstract class uv_fs_type {
  static const int UV_FS_UNKNOWN = -1;
  static const int UV_FS_CUSTOM = 0;
  static const int UV_FS_OPEN = 1;
  static const int UV_FS_CLOSE = 2;
  static const int UV_FS_READ = 3;
  static const int UV_FS_WRITE = 4;
  static const int UV_FS_SENDFILE = 5;
  static const int UV_FS_STAT = 6;
  static const int UV_FS_LSTAT = 7;
  static const int UV_FS_FSTAT = 8;
  static const int UV_FS_FTRUNCATE = 9;
  static const int UV_FS_UTIME = 10;
  static const int UV_FS_FUTIME = 11;
  static const int UV_FS_ACCESS = 12;
  static const int UV_FS_CHMOD = 13;
  static const int UV_FS_FCHMOD = 14;
  static const int UV_FS_FSYNC = 15;
  static const int UV_FS_FDATASYNC = 16;
  static const int UV_FS_UNLINK = 17;
  static const int UV_FS_RMDIR = 18;
  static const int UV_FS_MKDIR = 19;
  static const int UV_FS_MKDTEMP = 20;
  static const int UV_FS_RENAME = 21;
  static const int UV_FS_SCANDIR = 22;
  static const int UV_FS_LINK = 23;
  static const int UV_FS_SYMLINK = 24;
  static const int UV_FS_READLINK = 25;
  static const int UV_FS_CHOWN = 26;
  static const int UV_FS_FCHOWN = 27;
  static const int UV_FS_REALPATH = 28;
  static const int UV_FS_COPYFILE = 29;
  static const int UV_FS_LCHOWN = 30;
  static const int UV_FS_OPENDIR = 31;
  static const int UV_FS_READDIR = 32;
  static const int UV_FS_CLOSEDIR = 33;
  static const int UV_FS_STATFS = 34;
  static const int UV_FS_MKSTEMP = 35;
  static const int UV_FS_LUTIME = 36;
}

typedef uv_fs_cb = ffi.Pointer<ffi.NativeFunction<uv_fs_cbFunction>>;
typedef uv_fs_cbFunction = ffi.Void Function(ffi.Pointer<uv_fs_t> req);
typedef Dartuv_fs_cbFunction = void Function(ffi.Pointer<uv_fs_t> req);
typedef uv_fs_t = uv_fs_s;

final class uv_stat_t extends ffi.Struct {
  @ffi.Uint64()
  external int st_dev;

  @ffi.Uint64()
  external int st_mode;

  @ffi.Uint64()
  external int st_nlink;

  @ffi.Uint64()
  external int st_uid;

  @ffi.Uint64()
  external int st_gid;

  @ffi.Uint64()
  external int st_rdev;

  @ffi.Uint64()
  external int st_ino;

  @ffi.Uint64()
  external int st_size;

  @ffi.Uint64()
  external int st_blksize;

  @ffi.Uint64()
  external int st_blocks;

  @ffi.Uint64()
  external int st_flags;

  @ffi.Uint64()
  external int st_gen;

  external uv_timespec_t st_atim;

  external uv_timespec_t st_mtim;

  external uv_timespec_t st_ctim;

  external uv_timespec_t st_birthtim;
}

/// XXX(bnoordhuis) not 2038-proof, https://github.com/libuv/libuv/issues/3864
final class uv_timespec_t extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef uv_file = ffi.Int;
typedef Dartuv_file = int;
typedef mode_t = __mode_t;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef off_t = __off_t;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef uv_uid_t = uid_t;
typedef uid_t = __uid_t;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;

/// Platform-specific definitions for uv_spawn support.
typedef uv_gid_t = gid_t;
typedef gid_t = __gid_t;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;

/// uv_work_t is a subclass of uv_req_t.
final class uv_work_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  external ffi.Pointer<uv_loop_t> loop;

  external uv_work_cb work_cb;

  external uv_after_work_cb after_work_cb;

  external uv__work work_req;
}

typedef uv_work_cb = ffi.Pointer<ffi.NativeFunction<uv_work_cbFunction>>;
typedef uv_work_cbFunction = ffi.Void Function(ffi.Pointer<uv_work_t> req);
typedef Dartuv_work_cbFunction = void Function(ffi.Pointer<uv_work_t> req);
typedef uv_work_t = uv_work_s;
typedef uv_after_work_cb
    = ffi.Pointer<ffi.NativeFunction<uv_after_work_cbFunction>>;
typedef uv_after_work_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_work_t> req, ffi.Int status);
typedef Dartuv_after_work_cbFunction = void Function(
    ffi.Pointer<uv_work_t> req, int status);

final class uv_random_s extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @ffi.Int32()
  external int type;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Pointer<ffi.Void>> reserved;

  /// read-only
  external ffi.Pointer<uv_loop_t> loop;

  /// private
  @ffi.Int()
  external int status;

  external ffi.Pointer<ffi.Void> buf;

  @ffi.Size()
  external int buflen;

  external uv_random_cb cb;

  external uv__work work_req;
}

typedef uv_random_cb = ffi.Pointer<ffi.NativeFunction<uv_random_cbFunction>>;
typedef uv_random_cbFunction = ffi.Void Function(ffi.Pointer<uv_random_t> req,
    ffi.Int status, ffi.Pointer<ffi.Void> buf, ffi.Size buflen);
typedef Dartuv_random_cbFunction = void Function(ffi.Pointer<uv_random_t> req,
    int status, ffi.Pointer<ffi.Void> buf, int buflen);
typedef uv_random_t = uv_random_s;

final class uv_env_item_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> value;
}

final class uv_cpu_info_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> model;

  @ffi.Int()
  external int speed;

  external uv_cpu_times_s cpu_times;
}

final class uv_cpu_times_s extends ffi.Struct {
  /// milliseconds
  @ffi.Uint64()
  external int user;

  /// milliseconds
  @ffi.Uint64()
  external int nice;

  /// milliseconds
  @ffi.Uint64()
  external int sys;

  /// milliseconds
  @ffi.Uint64()
  external int idle;

  /// milliseconds
  @ffi.Uint64()
  external int irq;
}

final class uv_interface_address_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Array.multi([6])
  external ffi.Array<ffi.Char> phys_addr;

  @ffi.Int()
  external int is_internal;

  external UnnamedUnion19 address;

  external UnnamedUnion21 netmask;
}

final class UnnamedUnion19 extends ffi.Union {
  external sockaddr_in address4;

  external sockaddr_in6 address6;
}

final class sockaddr_in extends ffi.Struct {
  @sa_family_t()
  external int sin_family;

  @in_port_t()
  external int sin_port;

  external in_addr sin_addr;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.UnsignedChar> sin_zero;
}

typedef in_port_t = ffi.Uint16;
typedef Dartin_port_t = int;

final class in_addr extends ffi.Struct {
  @in_addr_t()
  external int s_addr;
}

typedef in_addr_t = ffi.Uint32;
typedef Dartin_addr_t = int;

final class sockaddr_in6 extends ffi.Struct {
  @sa_family_t()
  external int sin6_family;

  @in_port_t()
  external int sin6_port;

  @ffi.Uint32()
  external int sin6_flowinfo;

  external in6_addr sin6_addr;

  @ffi.Uint32()
  external int sin6_scope_id;
}

final class in6_addr extends ffi.Struct {
  external UnnamedUnion20 __in6_u;
}

final class UnnamedUnion20 extends ffi.Union {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.Uint8> __u6_addr8;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint16> __u6_addr16;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint32> __u6_addr32;
}

final class UnnamedUnion21 extends ffi.Union {
  external sockaddr_in netmask4;

  external sockaddr_in6 netmask6;
}

final class uv_passwd_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> username;

  @ffi.UnsignedLong()
  external int uid;

  @ffi.UnsignedLong()
  external int gid;

  external ffi.Pointer<ffi.Char> shell;

  external ffi.Pointer<ffi.Char> homedir;
}

final class uv_group_s extends ffi.Struct {
  external ffi.Pointer<ffi.Char> groupname;

  @ffi.UnsignedLong()
  external int gid;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> members;
}

final class uv_utsname_s extends ffi.Struct {
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> sysname;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> release;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> version;

  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> machine;
}

final class uv_statfs_s extends ffi.Struct {
  @ffi.Uint64()
  external int f_type;

  @ffi.Uint64()
  external int f_bsize;

  @ffi.Uint64()
  external int f_blocks;

  @ffi.Uint64()
  external int f_bfree;

  @ffi.Uint64()
  external int f_bavail;

  @ffi.Uint64()
  external int f_files;

  @ffi.Uint64()
  external int f_ffree;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint64> f_spare;
}

final class uv_metrics_s extends ffi.Struct {
  @ffi.Uint64()
  external int loop_count;

  @ffi.Uint64()
  external int events;

  @ffi.Uint64()
  external int events_waiting;

  /// private
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Uint64>> reserved;
}

abstract class uv_loop_option {
  static const int UV_LOOP_BLOCK_SIGNAL = 0;
  static const int UV_METRICS_IDLE_TIME = 1;
}

abstract class uv_run_mode {
  static const int UV_RUN_DEFAULT = 0;
  static const int UV_RUN_ONCE = 1;
  static const int UV_RUN_NOWAIT = 2;
}

typedef uv_malloc_func
    = ffi.Pointer<ffi.NativeFunction<uv_malloc_funcFunction>>;
typedef uv_malloc_funcFunction = ffi.Pointer<ffi.Void> Function(ffi.Size size);
typedef Dartuv_malloc_funcFunction = ffi.Pointer<ffi.Void> Function(int size);
typedef uv_realloc_func
    = ffi.Pointer<ffi.NativeFunction<uv_realloc_funcFunction>>;
typedef uv_realloc_funcFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, ffi.Size size);
typedef Dartuv_realloc_funcFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Pointer<ffi.Void> ptr, int size);
typedef uv_calloc_func
    = ffi.Pointer<ffi.NativeFunction<uv_calloc_funcFunction>>;
typedef uv_calloc_funcFunction = ffi.Pointer<ffi.Void> Function(
    ffi.Size count, ffi.Size size);
typedef Dartuv_calloc_funcFunction = ffi.Pointer<ffi.Void> Function(
    int count, int size);
typedef uv_free_func = ffi.Pointer<ffi.NativeFunction<uv_free_funcFunction>>;
typedef uv_free_funcFunction = ffi.Void Function(ffi.Pointer<ffi.Void> ptr);
typedef Dartuv_free_funcFunction = void Function(ffi.Pointer<ffi.Void> ptr);

abstract class uv_clock_id {
  static const int UV_CLOCK_MONOTONIC = 0;
  static const int UV_CLOCK_REALTIME = 1;
}

final class uv_timespec64_t extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_nsec;
}

/// XXX(bnoordhuis) not 2038-proof, https://github.com/libuv/libuv/issues/3864
final class uv_timeval_t extends ffi.Struct {
  @ffi.Long()
  external int tv_sec;

  @ffi.Long()
  external int tv_usec;
}

final class uv_timeval64_t extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

abstract class uv_membership {
  static const int UV_LEAVE_GROUP = 0;
  static const int UV_JOIN_GROUP = 1;
}

/// Request types.
typedef uv_req_t = uv_req_s;
typedef uv_walk_cb = ffi.Pointer<ffi.NativeFunction<uv_walk_cbFunction>>;
typedef uv_walk_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_handle_t> handle, ffi.Pointer<ffi.Void> arg);
typedef Dartuv_walk_cbFunction = void Function(
    ffi.Pointer<uv_handle_t> handle, ffi.Pointer<ffi.Void> arg);
typedef FILE = _IO_FILE;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

typedef uv_os_fd_t = ffi.Int;
typedef Dartuv_os_fd_t = int;
typedef uv_os_sock_t = ffi.Int;
typedef Dartuv_os_sock_t = int;
typedef uv_tcp_t = uv_tcp_s;

abstract class uv_tcp_flags {
  /// Used with uv_tcp_bind, when an IPv6 address is used.
  static const int UV_TCP_IPV6ONLY = 1;
}

/// UDP support.
abstract class uv_udp_flags {
  /// Disables dual stack mode.
  static const int UV_UDP_IPV6ONLY = 1;

  /// Indicates message was truncated because read buffer was too small. The
  /// remainder was discarded by the OS. Used in uv_udp_recv_cb.
  static const int UV_UDP_PARTIAL = 2;

  /// Indicates if SO_REUSEADDR will be set when binding the handle.
  /// This sets the SO_REUSEPORT socket flag on the BSDs and OS X. On other
  /// Unix platforms, it sets the SO_REUSEADDR flag.  What that means is that
  /// multiple threads or processes can bind to the same address without error
  /// (provided they all set the flag) but only the last one to bind will receive
  /// any traffic, in effect "stealing" the port from the previous listener.
  static const int UV_UDP_REUSEADDR = 4;

  /// Indicates that the message was received by recvmmsg, so the buffer provided
  /// must not be freed by the recv_cb callback.
  static const int UV_UDP_MMSG_CHUNK = 8;

  /// Indicates that the buffer provided has been fully utilized by recvmmsg and
  /// that it should now be freed by the recv_cb callback. When this flag is set
  /// in uv_udp_recv_cb, nread will always be 0 and addr will always be NULL.
  static const int UV_UDP_MMSG_FREE = 16;

  /// Indicates if IP_RECVERR/IPV6_RECVERR will be set when binding the handle.
  /// This sets IP_RECVERR for IPv4 and IPV6_RECVERR for IPv6 UDP sockets on
  /// Linux. This stops the Linux kernel from suppressing some ICMP error
  /// messages and enables full ICMP error reporting for faster failover.
  /// This flag is no-op on platforms other than Linux.
  static const int UV_UDP_LINUX_RECVERR = 32;

  /// Indicates that recvmmsg should be used, if available.
  static const int UV_UDP_RECVMMSG = 256;
}

abstract class uv_tty_mode_t {
  /// Initial/normal terminal mode
  static const int UV_TTY_MODE_NORMAL = 0;

  /// Raw input mode (On Windows, ENABLE_WINDOW_INPUT is also enabled)
  static const int UV_TTY_MODE_RAW = 1;

  /// Binary-safe I/O mode for IPC (Unix-only)
  static const int UV_TTY_MODE_IO = 2;
}

abstract class uv_tty_vtermstate_t {
  /// The console supports handling of virtual terminal sequences
  /// (Windows10 new console, ConEmu)
  static const int UV_TTY_SUPPORTED = 0;

  /// The console cannot process the virtual terminal sequence.  (Legacy
  /// console)
  static const int UV_TTY_UNSUPPORTED = 1;
}

typedef uv_tty_t = uv_tty_s;
typedef uv_pipe_t = uv_pipe_s;

abstract class uv_poll_event {
  static const int UV_READABLE = 1;
  static const int UV_WRITABLE = 2;
  static const int UV_DISCONNECT = 4;
  static const int UV_PRIORITIZED = 8;
}

/// uv_spawn() options.
abstract class uv_stdio_flags {
  static const int UV_IGNORE = 0;
  static const int UV_CREATE_PIPE = 1;
  static const int UV_INHERIT_FD = 2;
  static const int UV_INHERIT_STREAM = 4;

  /// When UV_CREATE_PIPE is specified, UV_READABLE_PIPE and UV_WRITABLE_PIPE
  /// determine the direction of flow, from the child process' perspective. Both
  /// flags may be specified to create a duplex data stream.
  static const int UV_READABLE_PIPE = 16;
  static const int UV_WRITABLE_PIPE = 32;

  /// When UV_CREATE_PIPE is specified, specifying UV_NONBLOCK_PIPE opens the
  /// handle in non-blocking mode in the child. This may cause loss of data,
  /// if the child is not designed to handle to encounter this mode,
  /// but can also be significantly more efficient.
  static const int UV_NONBLOCK_PIPE = 64;

  /// old name, for compatibility
  static const int UV_OVERLAPPED_PIPE = 64;
}

final class uv_stdio_container_s extends ffi.Struct {
  @ffi.Int32()
  external int flags;

  external UnnamedUnion22 data;
}

final class UnnamedUnion22 extends ffi.Union {
  external ffi.Pointer<uv_stream_t> stream;

  @ffi.Int()
  external int fd;
}

final class uv_process_options_s extends ffi.Struct {
  /// Called after the process exits.
  external uv_exit_cb exit_cb;

  /// Path to program to execute.
  external ffi.Pointer<ffi.Char> file;

  /// Command line arguments. args[0] should be the path to the program. On
  /// Windows this uses CreateProcess which concatenates the arguments into a
  /// string this can cause some strange errors. See the note at
  /// windows_verbatim_arguments.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> args;

  /// This will be set as the environ variable in the subprocess. If this is
  /// NULL then the parents environ will be used.
  external ffi.Pointer<ffi.Pointer<ffi.Char>> env;

  /// If non-null this represents a directory the subprocess should execute
  /// in. Stands for current working directory.
  external ffi.Pointer<ffi.Char> cwd;

  /// Various flags that control how uv_spawn() behaves. See the definition of
  /// `enum uv_process_flags` below.
  @ffi.UnsignedInt()
  external int flags;

  /// The `stdio` field points to an array of uv_stdio_container_t structs that
  /// describe the file descriptors that will be made available to the child
  /// process. The convention is that stdio[0] points to stdin, fd 1 is used for
  /// stdout, and fd 2 is stderr.
  ///
  /// Note that on windows file descriptors greater than 2 are available to the
  /// child process only if the child processes uses the MSVCRT runtime.
  @ffi.Int()
  external int stdio_count;

  external ffi.Pointer<uv_stdio_container_t> stdio;

  /// Libuv can change the child process' user/group id. This happens only when
  /// the appropriate bits are set in the flags fields. This is not supported on
  /// windows; uv_spawn() will fail and set the error to UV_ENOTSUP.
  @uv_uid_t()
  external int uid;

  @uv_gid_t()
  external int gid;
}

typedef uv_stdio_container_t = uv_stdio_container_s;

/// These are the flags that can be used for the uv_process_options.flags field.
abstract class uv_process_flags {
  /// Set the child process' user id. The user id is supplied in the `uid` field
  /// of the options struct. This does not work on windows; setting this flag
  /// will cause uv_spawn() to fail.
  static const int UV_PROCESS_SETUID = 1;

  /// Set the child process' group id. The user id is supplied in the `gid`
  /// field of the options struct. This does not work on windows; setting this
  /// flag will cause uv_spawn() to fail.
  static const int UV_PROCESS_SETGID = 2;

  /// Do not wrap any arguments in quotes, or perform any other escaping, when
  /// converting the argument list into a command line string. This option is
  /// only meaningful on Windows systems. On Unix it is silently ignored.
  static const int UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = 4;

  /// Spawn the child process in a detached state - this will make it a process
  /// group leader, and will effectively enable the child to keep running after
  /// the parent exits.  Note that the child process will still keep the
  /// parent's event loop alive unless the parent process calls uv_unref() on
  /// the child's process handle.
  static const int UV_PROCESS_DETACHED = 8;

  /// Hide the subprocess window that would normally be created. This option is
  /// only meaningful on Windows systems. On Unix it is silently ignored.
  static const int UV_PROCESS_WINDOWS_HIDE = 16;

  /// Hide the subprocess console window that would normally be created. This
  /// option is only meaningful on Windows systems. On Unix it is silently
  /// ignored.
  static const int UV_PROCESS_WINDOWS_HIDE_CONSOLE = 32;

  /// Hide the subprocess GUI window that would normally be created. This
  /// option is only meaningful on Windows systems. On Unix it is silently
  /// ignored.
  static const int UV_PROCESS_WINDOWS_HIDE_GUI = 64;

  /// On Windows, if the path to the program to execute, specified in
  /// uv_process_options_t's file field, has a directory component,
  /// search for the exact file name before trying variants with
  /// extensions like '.exe' or '.cmd'.
  static const int UV_PROCESS_WINDOWS_FILE_PATH_EXACT_NAME = 128;
}

typedef uv_process_options_t = uv_process_options_s;
typedef uv_pid_t = pid_t;
typedef pid_t = __pid_t;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class uv_rusage_t extends ffi.Struct {
  /// user CPU time used
  external uv_timeval_t ru_utime;

  /// system CPU time used
  external uv_timeval_t ru_stime;

  /// maximum resident set size
  @ffi.Uint64()
  external int ru_maxrss;

  /// integral shared memory size
  @ffi.Uint64()
  external int ru_ixrss;

  /// integral unshared data size
  @ffi.Uint64()
  external int ru_idrss;

  /// integral unshared stack size
  @ffi.Uint64()
  external int ru_isrss;

  /// page reclaims (soft page faults)
  @ffi.Uint64()
  external int ru_minflt;

  /// page faults (hard page faults)
  @ffi.Uint64()
  external int ru_majflt;

  /// swaps
  @ffi.Uint64()
  external int ru_nswap;

  /// block input operations
  @ffi.Uint64()
  external int ru_inblock;

  /// block output operations
  @ffi.Uint64()
  external int ru_oublock;

  /// IPC messages sent
  @ffi.Uint64()
  external int ru_msgsnd;

  /// IPC messages received
  @ffi.Uint64()
  external int ru_msgrcv;

  /// signals received
  @ffi.Uint64()
  external int ru_nsignals;

  /// voluntary context switches
  @ffi.Uint64()
  external int ru_nvcsw;

  /// involuntary context switches
  @ffi.Uint64()
  external int ru_nivcsw;
}

typedef uv_passwd_t = uv_passwd_s;
typedef uv_group_t = uv_group_s;
typedef uv_thread_t = pthread_t;
typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef uv_cpu_info_t = uv_cpu_info_s;
typedef uv_interface_address_t = uv_interface_address_s;

/// None of the above.
typedef uv_env_item_t = uv_env_item_s;
typedef uv_utsname_t = uv_utsname_s;
typedef uv_metrics_t = uv_metrics_s;
typedef uv_dir_t = uv_dir_s;

abstract class uv_fs_event {
  static const int UV_RENAME = 1;
  static const int UV_CHANGE = 2;
}

typedef uv_fs_poll_t = uv_fs_poll_s;
typedef uv_fs_poll_cb = ffi.Pointer<ffi.NativeFunction<uv_fs_poll_cbFunction>>;
typedef uv_fs_poll_cbFunction = ffi.Void Function(
    ffi.Pointer<uv_fs_poll_t> handle,
    ffi.Int status,
    ffi.Pointer<uv_stat_t> prev,
    ffi.Pointer<uv_stat_t> curr);
typedef Dartuv_fs_poll_cbFunction = void Function(
    ffi.Pointer<uv_fs_poll_t> handle,
    int status,
    ffi.Pointer<uv_stat_t> prev,
    ffi.Pointer<uv_stat_t> curr);

/// Flags to be passed to uv_fs_event_start().
abstract class uv_fs_event_flags {
  /// By default, if the fs event watcher is given a directory name, we will
  /// watch for all events in that directory. This flags overrides this behavior
  /// and makes fs_event report only changes to the directory entry itself. This
  /// flag does not affect individual files watched.
  /// This flag is currently not implemented yet on any backend.
  static const int UV_FS_EVENT_WATCH_ENTRY = 1;

  /// By default uv_fs_event will try to use a kernel interface such as inotify
  /// or kqueue to detect events. This may not work on remote filesystems such
  /// as NFS mounts. This flag makes fs_event fall back to calling stat() on a
  /// regular interval.
  /// This flag is currently not implemented yet on any backend.
  static const int UV_FS_EVENT_STAT = 2;

  /// By default, event watcher, when watching directory, is not registering
  /// (is ignoring) changes in it's subdirectories.
  /// This flag will override this behaviour on platforms that support it.
  static const int UV_FS_EVENT_RECURSIVE = 4;
}

final class uv_lib_t extends ffi.Struct {
  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<ffi.Char> errmsg;
}

typedef uv_sem_t = sem_t;

final class sem_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

typedef uv_cond_t = pthread_cond_t;

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct3 __value32;
}

final class UnnamedStruct3 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

typedef uv_barrier_t = pthread_barrier_t;

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

typedef uv_once_t = pthread_once_t;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;
typedef uv_key_t = pthread_key_t;
typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;
typedef uv_thread_cb = ffi.Pointer<ffi.NativeFunction<uv_thread_cbFunction>>;
typedef uv_thread_cbFunction = ffi.Void Function(ffi.Pointer<ffi.Void> arg);
typedef Dartuv_thread_cbFunction = void Function(ffi.Pointer<ffi.Void> arg);

abstract class uv_thread_create_flags {
  static const int UV_THREAD_NO_FLAGS = 0;
  static const int UV_THREAD_HAS_STACK_SIZE = 1;
}

final class uv_thread_options_s extends ffi.Struct {
  @ffi.UnsignedInt()
  external int flags;

  @ffi.Size()
  external int stack_size;
}

typedef uv_thread_options_t = uv_thread_options_s;

final class uv_any_handle extends ffi.Union {
  external uv_async_t async1;

  external uv_check_t check;

  external uv_fs_event_t fs_event;

  external uv_fs_poll_t fs_poll;

  external uv_handle_t handle;

  external uv_idle_t idle;

  external uv_pipe_t pipe;

  external uv_poll_t poll;

  external uv_prepare_t prepare;

  external uv_process_t process;

  external uv_stream_t stream;

  external uv_tcp_t tcp;

  external uv_timer_t timer;

  external uv_tty_t tty;

  external uv_udp_t udp;

  external uv_signal_t signal;
}

final class uv_any_req extends ffi.Union {
  external uv_req_t req;

  external uv_connect_t connect;

  external uv_write_t write;

  external uv_shutdown_t shutdown;

  external uv_udp_send_t udp_send;

  external uv_fs_t fs;

  external uv_work_t work;

  external uv_getaddrinfo_t getaddrinfo;

  external uv_getnameinfo_t getnameinfo;

  external uv_random_t random;
}

const int UV_PIPE_NO_TRUNCATE = 1;

const int UV_THREAD_PRIORITY_HIGHEST = 2;

const int UV_THREAD_PRIORITY_ABOVE_NORMAL = 1;

const int UV_THREAD_PRIORITY_NORMAL = 0;

const int UV_THREAD_PRIORITY_BELOW_NORMAL = -1;

const int UV_THREAD_PRIORITY_LOWEST = -2;

const int UV_PRIORITY_LOW = 19;

const int UV_PRIORITY_BELOW_NORMAL = 10;

const int UV_PRIORITY_NORMAL = 0;

const int UV_PRIORITY_ABOVE_NORMAL = -7;

const int UV_PRIORITY_HIGH = -14;

const int UV_PRIORITY_HIGHEST = -20;

const int UV_MAXHOSTNAMESIZE = 65;

const int UV_FS_COPYFILE_EXCL = 1;

const int UV_FS_COPYFILE_FICLONE = 2;

const int UV_FS_COPYFILE_FICLONE_FORCE = 4;

const int UV_FS_SYMLINK_DIR = 1;

const int UV_FS_SYMLINK_JUNCTION = 2;

const int UV_IF_NAMESIZE = 17;
